// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name self_ios_sdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Combine
import CoreLocation
import CoreVideo
import CryptoKit
import DeviceCheck
import Foundation
import OSLog
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import self_ios_sdk
@_hasMissingDesignatedInitializers public class CredentialRequest : self_ios_sdk.BaseMessage {
  public class Builder {
    public init()
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.CredentialRequest.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.CredentialRequest.Builder
    public func withId(_ messageId: Swift.String) -> self_ios_sdk.CredentialRequest.Builder
    public func withTypes(_ types: [Swift.String]) -> self_ios_sdk.CredentialRequest.Builder
    public func build() -> self_ios_sdk.CredentialRequest
    @objc deinit
  }
  public func types() -> [Swift.String]
  @objc deinit
}
@_spi(InternalUse) @_hasMissingDesignatedInitializers public class Credential {
  @_spi(InternalUse) public func issuer() -> Swift.String
  @_spi(InternalUse) public func types() -> [Swift.String]
  @_spi(InternalUse) public func claims() -> [self_ios_sdk.Claim]
  @_spi(InternalUse) public func created() -> Swift.Int64
  @_spi(InternalUse) public func validFrom() -> Swift.Int64
  @_spi(InternalUse) @objc deinit
}
@_spi(InternalUse) public struct CredentialsByType {
  @_spi(InternalUse) public let types: [Swift.String]
  @_spi(InternalUse) public let credentials: [self_ios_sdk.Credential]
}
@_Concurrency.MainActor @preconcurrency public struct SigningRequestView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk18SigningRequestViewV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers public class VerificationResponse : self_ios_sdk.BaseMessage {
  public class Builder {
    public init()
    public func withRequestId(_ requestId: Swift.String) -> self_ios_sdk.VerificationResponse.Builder
    public func withStatus(_ status: self_ios_sdk.ResponseStatus) -> self_ios_sdk.VerificationResponse.Builder
    public func withTypes(_ types: [Swift.String]) -> self_ios_sdk.VerificationResponse.Builder
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.VerificationResponse.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.VerificationResponse.Builder
    public func build() -> self_ios_sdk.VerificationResponse
    @objc deinit
  }
  public func addProperties(values: [Swift.String : Swift.String])
  public func requestId() -> Swift.String
  public func status() -> self_ios_sdk.ResponseStatus
  public func types() -> [Swift.String]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataObject {
  public class Builder {
    public init()
    public func withData(_ data: Foundation.Data) -> self_ios_sdk.DataObject.Builder
    public func withName(_ name: Swift.String) -> self_ios_sdk.DataObject.Builder
    public func withMineType(_ mimeType: Swift.String) -> self_ios_sdk.DataObject.Builder
    public func build() -> self_ios_sdk.DataObject
    @objc deinit
  }
  public func content() -> Foundation.Data
  public func contentType() -> Swift.String
  @objc deinit
}
public struct DiscoveryData {
  public var requestId: Swift.String
  public var address: self_ios_sdk.PublicKey
  public var sandbox: Swift.Bool
}
@_hasMissingDesignatedInitializers public class ChatMessage : self_ios_sdk.BaseMessage {
  public class Builder {
    public init()
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.ChatMessage.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.ChatMessage.Builder
    public func withId(_ messageId: Swift.String) -> self_ios_sdk.ChatMessage.Builder
    public func withMessage(_ message: Swift.String) -> self_ios_sdk.ChatMessage.Builder
    public func withReference(_ reference: Swift.String) -> self_ios_sdk.ChatMessage.Builder
    public func withAttachments(_ attachments: [self_ios_sdk.DataObject]) -> self_ios_sdk.ChatMessage.Builder
    public func build() -> self_ios_sdk.ChatMessage
    @objc deinit
  }
  public func message() -> Swift.String
  public func reference() -> Swift.String?
  public func attachments() -> [self_ios_sdk.DataObject]
  @objc deinit
}

@_hasMissingDesignatedInitializers public class SigningResponse : self_ios_sdk.BaseMessage {
  public class Builder {
    public init()
    public func withRequestId(_ requestId: Swift.String) -> self_ios_sdk.SigningResponse.Builder
    public func withStatus(_ status: self_ios_sdk.ResponseStatus) -> self_ios_sdk.SigningResponse.Builder
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.SigningResponse.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.SigningResponse.Builder
    public func build() -> self_ios_sdk.SigningResponse
    @objc deinit
  }
  public func requestId() -> Swift.String
  public func status() -> self_ios_sdk.ResponseStatus
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ShareResources {
  public static func subjectToFriendlyString(subject: Swift.String) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CredentialResponse : self_ios_sdk.BaseMessage {
  public class Builder {
    public init()
    public func withRequestId(_ requestId: Swift.String) -> self_ios_sdk.CredentialResponse.Builder
    public func withStatus(_ status: self_ios_sdk.ResponseStatus) -> self_ios_sdk.CredentialResponse.Builder
    public func withTypes(_ types: [Swift.String]) -> self_ios_sdk.CredentialResponse.Builder
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.CredentialResponse.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.CredentialResponse.Builder
    public func build() -> self_ios_sdk.CredentialResponse
    @objc deinit
  }
  public func requestId() -> Swift.String
  public func status() -> self_ios_sdk.ResponseStatus
  public func types() -> [Swift.String]
  @objc deinit
}
extension Foundation.Date {
  public var unixTimestamp: Swift.Int64 {
    get
  }
  public func toRFC3339String() -> Swift.String
}
extension UIKit.UIImage {
  public func imageRotatedByDegrees(degrees: CoreFoundation.CGFloat) -> UIKit.UIImage
  public func fixedOrientation() -> UIKit.UIImage
}
@objc @_inheritsConvenienceInitializers public class LivenessCheck : ObjectiveC.NSObject, Foundation.ObservableObject {
  public enum Challenge : Swift.String {
    case None, Done, Smile, Blink, TurnLeft, TurnRight, LookUp, LookDown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Error : Swift.String {
    case FaceChanged, OutOfPreview
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String {
    case Info, Passed, Error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class ChallengeState {
    @objc deinit
  }
  public var currentChallenge: self_ios_sdk.LivenessCheck.ChallengeState
  public var onStatusUpdated: ((self_ios_sdk.LivenessCheck.Status) -> Swift.Void)?
  public var onChallengeChanged: ((self_ios_sdk.LivenessCheck.Challenge, self_ios_sdk.LivenessCheck.Error?) -> Swift.Void)?
  public var isVerificationRequired: Swift.Bool
  public var properties: [Swift.String : Swift.String]
  public func getAttemptsNumber() -> Swift.Int
  @objc override dynamic public init()
  public init(account: self_ios_sdk.Account)
  public func initialize(account: self_ios_sdk.Account, cameraView: UIKit.UIView)
  public func handleImageBuffer(sampleBuffer: CoreMedia.CMSampleBuffer)
  public func start()
  public func stop()
  public func setupAndStart()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension self_ios_sdk.LivenessCheck : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@_Concurrency.MainActor @preconcurrency public struct QRCodeReaderView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, onComplete: @escaping (Swift.Result<self_ios_sdk.DiscoveryData, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk16QRCodeReaderViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct LivenessCheckFlow : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(callback: ((_ selfieImageData: Foundation.Data) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk17LivenessCheckFlowV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct MessageView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, message: any self_ios_sdk.Message)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk11MessageViewV4bodyQrvp", 0) __
}

extension self_ios_sdk.SelfSDK {
  public static func showOnboarding(account: self_ios_sdk.Account, onFinish: @escaping ((Swift.Bool) -> Swift.Void))
}
@_spi(InternalUse) public enum BackupFileType : Swift.String, Swift.CaseIterable {
  @_spi(InternalUse) case sandbox
  @_spi(InternalUse) case production
  @_spi(InternalUse) public init?(rawValue: Swift.String)
  @_spi(InternalUse) public typealias AllCases = [self_ios_sdk.BackupFileType]
  @_spi(InternalUse) public typealias RawValue = Swift.String
  @_spi(InternalUse) nonisolated public static var allCases: [self_ios_sdk.BackupFileType] {
    @_spi(InternalUse) get
  }
  @_spi(InternalUse) public var rawValue: Swift.String {
    @_spi(InternalUse) get
  }
}
@_spi(InternalUse) @objc public class BackupManager : ObjectiveC.NSObject {
  @_spi(InternalUse) public init(iCloudContainerIdentifier: Swift.String, environment: Swift.String)
  @_spi(InternalUse) public func getBackupFile(backupFileType: self_ios_sdk.BackupFileType) -> Foundation.URL?
  @_spi(InternalUse) @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct CredentialRequestView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, message: any self_ios_sdk.Message)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk21CredentialRequestViewV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers public class Notification {
  public func id() -> Swift.String
  public func type() -> Swift.String
  public func message() -> Swift.String
  public func fromAddress() -> self_ios_sdk.PublicKey?
  @objc deinit
}
@_spi(InternalUse) @_hasMissingDesignatedInitializers public class Claim {
  @_spi(InternalUse) public func subject() -> Swift.String
  @_spi(InternalUse) public func value() -> Swift.String
  @_spi(InternalUse) public func subjectToFriendlyString() -> Swift.String
  @_spi(InternalUse) @objc deinit
}
public enum QRCodeEncoding {
  case svg
  case unicode
  public static func == (a: self_ios_sdk.QRCodeEncoding, b: self_ios_sdk.QRCodeEncoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ComparisonOperator : Swift.String {
  case EQUALS
  case NOT_EQUALS
  case GREATER_THAN
  case GREATER_THAN_OR_EQUALS
  case LESS_THAN
  case LESS_THAN_OR_EQUALS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentSummaryType : Swift.String {
  case CHAT_REFERENCE
  case CHAT_ATTACHMENT
  case CREDENTIAL
  case CHAT_MESSAGE
  case PRESENTATION
  case ASSET
  case SIGNATURE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Environment : Swift.String {
  case dev
  case test
  case preview
  case staging
  case production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Constants {
  public static let DEFAULT_EXP_DATE: Swift.Int
  public static let DEFAULT_EXP_MINUTES: Swift.Int
  public static let VERIFICATION_IMAGE_SIZE_MAX: Swift.Int
  public static let VERIFICATION_IMAGE_DIMENSION_MAX: Swift.Int
  public static let NOTIFICATION_MSG_MAX: Swift.Int
  public static let STATUS_OK: Swift.Int
  public static let SUBJECT_EMAIL: Swift.String
  public static let SUBJECT_PHONE: Swift.String
  public static let SUBJECT_SECURITY_CODE: Swift.String
  public static let SUBJECT_UNVERIFIED_PHONE: Swift.String
  public static let SUBJECT_PHOTO: Swift.String
  public static let SUBJECT_NAME: Swift.String
  public static let SUBJECT_GIVEN_NAME: Swift.String
  public static let SUBJECT_SURNAME: Swift.String
  public static let SUBJECT_FIRST_NAME: Swift.String
  public static let SUBJECT_LAST_NAME: Swift.String
  public static let SUBJECT_GENDER: Swift.String
  public static let SUBJECT_SEX: Swift.String
  public static let SUBJECT_NUMBER: Swift.String
  public static let SUBJECT_ADDRESS: Swift.String
  public static let SUBJECT_NATIONALITY: Swift.String
  public static let SUBJECT_DOB: Swift.String
  public static let SUBJECT_POB: Swift.String
  public static let SUBJECT_DATE_OF_EXPIRATION: Swift.String
  public static let SUBJECT_DATE_OF_ISSUANCE: Swift.String
  public static let SUBJECT_DATE_OF_ISSUE: Swift.String
  public static let SUBJECT_ISSUE_AUTHORITY: Swift.String
  public static let SUBJECT_COUNTRY_OF_ISSUANCE: Swift.String
  public static let SUBJECT_MRZ: Swift.String
  public static let SUBJECT_LOCATION: Swift.String
  public static let SUBJECT_SOURCE_IMAGE_HASH: Swift.String
  public static let SUBJECT_DISPLAY_NAME: Swift.String
  public static let SUBJECT_VALID_FROM: Swift.String
  public static let SUBJECT_VALID_TO: Swift.String
  public static let SUBJECT_CATEGORIES: Swift.String
  public static let SUBJECT_SORT_CODE: Swift.String
  public static let SUBJECT_DG1: Swift.String
  public static let SUBJECT_DG2: Swift.String
  public static let SUBJECT_SOD: Swift.String
  public static let SUBJECT_AVATAR_IMAGE: Swift.String
  public static let SUBJECT_SOURCE_IMAGE: Swift.String
  public static let SUBJECT_SELFIE_IMAGE: Swift.String
  public static let SUBJECT_PASSPORT_IMAGE: Swift.String
  public static let SUBJECT_DOCUMENT_IMAGE_FRONT: Swift.String
  public static let SUBJECT_DOCUMENT_IMAGE_BACK: Swift.String
  public static let SUBJECT_AGREEMENT_TERMS: Swift.String
  public static let FIELD_VERIFIED_ON: Swift.String
  public static let FIELD_VERIFIED_BY: Swift.String
  public static let FIELD_LAST_VERIFIED_ON: Swift.String
  public static let FIELD_LAST_VERIFIED_BY: Swift.String
  public static let FIELD_ADDED_ON: Swift.String
}
public struct CredentialType {
  public static let Verifiable: Swift.String
  public static let Organisation: Swift.String
  public static let Application: Swift.String
  public static let Agreement: Swift.String
  public static let Liveness: Swift.String
  public static let Email: Swift.String
  public static let Phone: Swift.String
  public static let PhoneConfirm: Swift.String
  public static let Custom: Swift.String
  public static let Passport: Swift.String
  public static let IDCard: Swift.String
  public static let DrivingLicense: Swift.String
  public static let Document: Swift.String
}
@_Concurrency.MainActor @preconcurrency public struct RegistrationFlow : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, onComplete: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk16RegistrationFlowV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers public class NewLivenessCheckViewModel : Foundation.ObservableObject {
  final public let account: self_ios_sdk.Account
  @Combine.Published @_projectedValueProperty($livenessCheck) public var livenessCheck: self_ios_sdk.LivenessCheck {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $livenessCheck: Combine.Published<self_ios_sdk.LivenessCheck>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VerificationRequest : self_ios_sdk.BaseMessage {
  public class Builder {
    public init()
    public func withId(_ messageId: Swift.String) -> self_ios_sdk.VerificationRequest.Builder
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.VerificationRequest.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.VerificationRequest.Builder
    public func withTypes(_ types: [Swift.String]) -> self_ios_sdk.VerificationRequest.Builder
    public func withEvidence(_ evidence: [Swift.String : self_ios_sdk.DataObject]) -> self_ios_sdk.VerificationRequest.Builder
    public func build() -> self_ios_sdk.VerificationRequest
    @objc deinit
  }
  public func addProperties(values: [Swift.String : Swift.String])
  public func types() -> [Swift.String]
  public func evidence() -> [Swift.String : self_ios_sdk.DataObject]
  @objc deinit
}
public protocol AccountDelegate {
  func onConnect()
  func onAcknowledgement(id: Swift.String)
  func onMessage(message: any self_ios_sdk.Message)
  func onDisconnect(errorMessage: Swift.String?)
  func onError(id: Swift.String, errorMessage: Swift.String?)
}
public enum ResponseStatus : Swift.String {
  case none
  case pending
  case accepted
  case rejected
  case verified
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_spi(InternalUse) public struct LivenessData {
  @_spi(InternalUse) public let selfieData: Foundation.Data
  @_spi(InternalUse) public let credentials: [self_ios_sdk.Credential]
}
@_spi(InternalUse) @_Concurrency.MainActor @preconcurrency public struct LivenessFlow : SwiftUICore.View {
  @_spi(InternalUse) @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, isVerificationRequired: Swift.Bool = true, autoDismiss: Swift.Bool = true, onComplete: ((Swift.Result<self_ios_sdk.LivenessData, any Swift.Error>) -> Swift.Void)?)
  @_spi(InternalUse) @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, isVerificationRequired: Swift.Bool = true, autoDismiss: Swift.Bool = true, onFinish: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @_spi(InternalUse) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(InternalUse) get
  }
  @_spi(InternalUse) public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk12LivenessFlowV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers public class SigningRequest : self_ios_sdk.BaseMessage {
  public class Builder {
    public init()
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.SigningRequest.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.SigningRequest.Builder
    public func withId(_ messageId: Swift.String) -> self_ios_sdk.SigningRequest.Builder
    public func withTypes(_ types: [Swift.String]) -> self_ios_sdk.SigningRequest.Builder
    public func build() -> self_ios_sdk.SigningRequest
    @objc deinit
  }
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct DocumentFlow : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, devMode: Swift.Bool = false, autoCaptureImage: Swift.Bool = false, onInfo: (([Foundation.URL]) -> Swift.Void)? = nil, onResult: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk12DocumentFlowV4bodyQrvp", 0) __
}
public struct ez {
  public static func GetCurrentTimeStamp() -> Swift.String
  public static var appDisplayName: Swift.String? {
    get
  }
  public static var appVersion: Swift.String? {
    get
  }
  public static var appBuild: Swift.String? {
    get
  }
  public static var appBundleID: Swift.String? {
    get
  }
  public static var appVersionAndBuild: Swift.String? {
    get
  }
  public static var deviceVersion: Swift.String {
    get
  }
  public static var isDebug: Swift.Bool {
    get
  }
  public static var isRelease: Swift.Bool {
    get
  }
  public static var isSimulator: Swift.Bool {
    get
  }
  public static var isDevice: Swift.Bool {
    get
  }
  public static var isInTestFlight: Swift.Bool {
    get
  }
  public static var screenOrientation: UIKit.UIInterfaceOrientation {
    get
  }
  public static var screenWidth: CoreFoundation.CGFloat {
    get
  }
  public static var screenHeight: CoreFoundation.CGFloat {
    get
  }
  public static var screenStatusBarHeight: CoreFoundation.CGFloat {
    get
  }
  public static var screenHeightWithoutStatusBar: CoreFoundation.CGFloat {
    get
  }
  public static var currentRegion: Swift.String? {
    get
  }
  public static func iterateEnum<T>(_: T.Type) -> Swift.AnyIterator<T> where T : Swift.Hashable
  public static func dispatchDelay(_ second: Swift.Double, closure: @escaping () -> Swift.Void)
  public static func runThisAfterDelay(seconds: Swift.Double, after: @escaping () -> Swift.Void)
  public static func runThisAfterDelay(seconds: Swift.Double, queue: Dispatch.DispatchQueue, after: @escaping () -> Swift.Void)
  public static func runThisInMainThread(_ block: @escaping () -> Swift.Void)
  public static func runThisInBackground(_ block: @escaping () -> Swift.Void)
  @discardableResult
  public static func runThisEvery(seconds: Foundation.TimeInterval, startAfterSeconds: Foundation.TimeInterval, handler: @escaping (CoreFoundation.CFRunLoopTimer?) -> Swift.Void) -> Foundation.Timer
  @available(*, deprecated, renamed: "DispatchQueue.main")
  public var globalMainQueue: Dispatch.DispatchQueue {
    get
  }
  @available(*, deprecated, renamed: "DispatchQueue.main")
  public var globalUserInteractiveQueue: Dispatch.DispatchQueue {
    get
  }
  @available(*, deprecated, renamed: "DispatchQueue.global()")
  public var globalUserInitiatedQueue: Dispatch.DispatchQueue {
    get
  }
  @available(*, deprecated, renamed: "DispatchQueue.global()")
  public var globalUtilityQueue: Dispatch.DispatchQueue {
    get
  }
  @available(*, deprecated, renamed: "DispatchQueue.global()")
  public var globalBackgroundQueue: Dispatch.DispatchQueue {
    get
  }
  @available(*, deprecated, renamed: "DispatchQueue.global()")
  public var globalQueue: Dispatch.DispatchQueue {
    get
  }
  public static func requestImage(_ url: Swift.String, success: @escaping (UIKit.UIImage?) -> Swift.Void)
  public static func requestJSON(_ url: Swift.String, success: @escaping ((Any?) -> Swift.Void), error: ((Foundation.NSError) -> Swift.Void)?)
}
@objc @_hasMissingDesignatedInitializers public class Account : ObjectiveC.NSObject {
  public class Builder {
    public init()
    public func withEnvironment(_ environment: self_ios_sdk.Environment) -> self_ios_sdk.Account.Builder
    public func withSandbox(_ sandbox: Swift.Bool) -> self_ios_sdk.Account.Builder
    public func withGroupId(_ groupId: Swift.String) -> self_ios_sdk.Account.Builder
    public func withStoragePath(_ storagePath: Swift.String) -> self_ios_sdk.Account.Builder
    public func withDelegate(delegate: (any self_ios_sdk.AccountDelegate)?) -> self_ios_sdk.Account.Builder
    public func build() -> self_ios_sdk.Account
    @objc deinit
  }
  public func registered() -> Swift.Bool
  public func aliasCredential(identifierAddress: self_ios_sdk.PublicKey, info: [Swift.String : Swift.String]) -> Foundation.Data
  public func generateAddress() -> self_ios_sdk.PublicKey?
  public func send(toAddress: self_ios_sdk.PublicKey, message: any self_ios_sdk.Message) async throws -> Swift.String?
  public func qrCode(encoding: self_ios_sdk.QRCodeEncoding) async throws -> Foundation.Data
  @_spi(InternalUse) public static func qrCode(data: Foundation.Data) async throws -> self_ios_sdk.DiscoveryData?
  public func connectWith(qrCode: Foundation.Data) async throws -> self_ios_sdk.PublicKey?
  public func connectWith(address: self_ios_sdk.PublicKey, info: [Swift.String : Any]) async throws -> self_ios_sdk.PublicKey?
  public func decryptNotification(forAddress: self_ios_sdk.PublicKey, payload: Swift.String) throws -> self_ios_sdk.Notification?
  @_spi(InternalUse) public func backup() async -> Foundation.URL?
  @_spi(InternalUse) public func restore(backupFile: Foundation.URL, selfieImage: Foundation.Data) async throws -> [self_ios_sdk.Credential]
  public func valueStore(key: Swift.String, value: Foundation.Data) throws
  public func valueLookup(key: Swift.String) throws -> Foundation.Data?
  public func valueRemove(key: Swift.String) throws
  public func close() async throws
  @_spi(InternalUse) public func register(selfieImage: Foundation.Data, forAddress: self_ios_sdk.PublicKey, presentation: Foundation.Data) async throws -> Swift.Bool
  @_spi(InternalUse) public func presentationForAddress(forAddress: self_ios_sdk.PublicKey, credentials: [self_ios_sdk.Credential]) -> Foundation.Data
  @_spi(InternalUse) public func setLivenessCredential(_ credentials: [self_ios_sdk.Credential])
  @_spi(InternalUse) public func getLivenessCredentials() -> [self_ios_sdk.Credential]?
  @_spi(InternalUse) public func setSelfieImageData(_ selfieData: Foundation.Data)
  @_spi(InternalUse) public func getSelfieImageData() -> Foundation.Data?
  @_spi(InternalUse) public func credentials() -> [self_ios_sdk.Credential]
  @_spi(InternalUse) public func respondToCredentialMessage(credentialMessage: self_ios_sdk.CredentialMessage, status: self_ios_sdk.ResponseStatus)
  @_spi(InternalUse) public func credentialsByType() -> [self_ios_sdk.CredentialsByType]
  @_spi(InternalUse) public func lookUpCredentials(claims: [self_ios_sdk.Claim]) -> [self_ios_sdk.Credential]
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BackupFlow : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, iCloudContainerIdentifier: Swift.String, onComplete: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk10BackupFlowV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct RestoreFlow : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, iCloudContainerIdentifier: Swift.String, onComplete: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk11RestoreFlowV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct VerificationRequestView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk23VerificationRequestViewV4bodyQrvp", 0) __
}

public protocol Message {
  func id() -> Swift.String
  func toAddress() -> self_ios_sdk.PublicKey
  func fromAddress() -> self_ios_sdk.PublicKey
  func properties() -> [Swift.String : Swift.String]
}
public protocol Evidence {
  func evidence() -> [Swift.String : self_ios_sdk.DataObject]
}
@_hasMissingDesignatedInitializers public class BaseMessage : self_ios_sdk.Message {
  public func id() -> Swift.String
  public func toAddress() -> self_ios_sdk.PublicKey
  public func fromAddress() -> self_ios_sdk.PublicKey
  public func properties() -> [Swift.String : Swift.String]
  @objc deinit
}
public struct PublicKey {
  public init(rawValue: Swift.String)
  public func getRawValue() -> Swift.String
}
@_hasMissingDesignatedInitializers public class CredentialMessage : self_ios_sdk.BaseMessage {
  public class Builder {
    public init(id: Swift.String)
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.CredentialMessage.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.CredentialMessage.Builder
    public func build() -> self_ios_sdk.CredentialMessage
    @objc deinit
  }
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct EmailFlow : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(account: self_ios_sdk.Account, autoDismiss: Swift.Bool = true, onResult: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12self_ios_sdk9EmailFlowV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class SelfSDK {
  public static func initialize(applicationAddress: Swift.String? = nil, pushToken: (() -> Swift.String)? = nil, log: ((Swift.String) -> Swift.Void)? = nil)
  public static func verifyEmail(account: self_ios_sdk.Account, transitionAsModal: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func verifyPhoneNumber(account: self_ios_sdk.Account, sendTo: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Receipt : self_ios_sdk.BaseMessage {
  public class Builder {
    public init()
    public func withRead(_ read: [Swift.String]) -> self_ios_sdk.Receipt.Builder
    public func withDelivered(_ delivered: [Swift.String]) -> self_ios_sdk.Receipt.Builder
    public func toAddress(_ toAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.Receipt.Builder
    public func fromAddress(_ fromAddress: self_ios_sdk.PublicKey) -> self_ios_sdk.Receipt.Builder
    public func build() -> self_ios_sdk.Receipt
    @objc deinit
  }
  public func read() -> [Swift.String]
  public func delivered() -> [Swift.String]
  @objc deinit
}
extension self_ios_sdk.SelfSDK {
  public static func readingPassportChip(mrzKey: Swift.String, completion: ((Foundation.Data?, [Swift.String : Swift.String]?) -> Swift.Void)? = nil)
}
extension self_ios_sdk.SigningRequestView : Swift.Sendable {}
extension self_ios_sdk.LivenessCheck.Challenge : Swift.Equatable {}
extension self_ios_sdk.LivenessCheck.Challenge : Swift.Hashable {}
extension self_ios_sdk.LivenessCheck.Challenge : Swift.RawRepresentable {}
extension self_ios_sdk.LivenessCheck.Error : Swift.Equatable {}
extension self_ios_sdk.LivenessCheck.Error : Swift.Hashable {}
extension self_ios_sdk.LivenessCheck.Error : Swift.RawRepresentable {}
extension self_ios_sdk.LivenessCheck.Status : Swift.Equatable {}
extension self_ios_sdk.LivenessCheck.Status : Swift.Hashable {}
extension self_ios_sdk.LivenessCheck.Status : Swift.RawRepresentable {}
extension self_ios_sdk.QRCodeReaderView : Swift.Sendable {}
extension self_ios_sdk.LivenessCheckFlow : Swift.Sendable {}
extension self_ios_sdk.MessageView : Swift.Sendable {}
@_spi(InternalUse) extension self_ios_sdk.BackupFileType : Swift.Equatable {}
@_spi(InternalUse) extension self_ios_sdk.BackupFileType : Swift.Hashable {}
@_spi(InternalUse) extension self_ios_sdk.BackupFileType : Swift.RawRepresentable {}
extension self_ios_sdk.CredentialRequestView : Swift.Sendable {}
extension self_ios_sdk.QRCodeEncoding : Swift.Equatable {}
extension self_ios_sdk.QRCodeEncoding : Swift.Hashable {}
extension self_ios_sdk.ComparisonOperator : Swift.Equatable {}
extension self_ios_sdk.ComparisonOperator : Swift.Hashable {}
extension self_ios_sdk.ComparisonOperator : Swift.RawRepresentable {}
extension self_ios_sdk.ContentSummaryType : Swift.Equatable {}
extension self_ios_sdk.ContentSummaryType : Swift.Hashable {}
extension self_ios_sdk.ContentSummaryType : Swift.RawRepresentable {}
extension self_ios_sdk.Environment : Swift.Equatable {}
extension self_ios_sdk.Environment : Swift.Hashable {}
extension self_ios_sdk.Environment : Swift.RawRepresentable {}
extension self_ios_sdk.RegistrationFlow : Swift.Sendable {}
extension self_ios_sdk.ResponseStatus : Swift.Equatable {}
extension self_ios_sdk.ResponseStatus : Swift.Hashable {}
extension self_ios_sdk.ResponseStatus : Swift.RawRepresentable {}
@_spi(InternalUse) extension self_ios_sdk.LivenessFlow : Swift.Sendable {}
extension self_ios_sdk.DocumentFlow : Swift.Sendable {}
extension self_ios_sdk.BackupFlow : Swift.Sendable {}
extension self_ios_sdk.RestoreFlow : Swift.Sendable {}
extension self_ios_sdk.VerificationRequestView : Swift.Sendable {}
extension self_ios_sdk.EmailFlow : Swift.Sendable {}
